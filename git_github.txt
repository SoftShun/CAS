모든 명령어 앞에는 git (예를 들어 git add git_github.txt) 
init : git 사용
add (파일명) : 파일 staging
add (파일명) ... (파일명) : 여러 파일 staging
add . : 전체 파일 staging
commit -m 'abc' : abc라는 문구 commit
status : 현재 git상태 창 (staging한 파일 보기 등) 
log : 커밋한 내역들 보기
log --all --oneline : 커밋한 내역 한 줄로 보기
log --all --oneline --graph : 그래프 형식으로 보여줌 (branch를 더 쉽게 볼 수 있음)
diff : 커밋하기 이전과 후의 차이점을 비교해줌
difftool : 커밋하기 이전과 후의 차이점 비교 및 수정 기능 (:q OR :qa로 닫기)
difftool (커밋아이디) : 현재파일 vs 특정커밋 비교 가능 (커밋아이디 두개 치면 특정커밋끼리 비교)
branch (abc) : abc라는 브랜치 생성. 괄호나 따옴표 X (사본같은 개념)
switch (abc) : abc라는 브랜치로 이동. 괄호나 따옴표 X 
merge (브랜치명) : 브랜치 코드를 main에 합치기
q (앞에 git 안붙음) : 실행 종료
branch -d (브랜치명) : merge 완료된 브랜치 삭제
branch -D (브랜치명) : merge 안한 브랜치 삭제
restore (파일명) : 파일 복구
restore --source (커밋 아이디) (파일명) : 특정 시점으로 복구
revert (커밋 아이디) : commit 취소 및 수정 (여러 커밋 아이디 입력 가능)
revert HEAD : 가장 최근 commit 취소
reset --hard (커밋 아이디) : 커밋 아이디가 생성된 시점으로 되돌리기 (리셋, 협업시에는 X)
reset --soft (커밋 아이디) : 리셋인데 변동사항 지우지 말고 스테이징 해놓기
reset --mixed (커밋 아이디) : 리셋인데 변동사항 지우지 말고 unstage해놓기

- rebase merge - : 브랜치의 시작점을 다른 commit으로 옮겨줌. rebase하고 fast-forward merge하는 것
git switch 새로운브랜치
git rebase main

git switch main
git merge 새로운브랜치
------------------------------------------------------------------------------------------
>> Git Hub <<
branch -M main : 브랜치 이름 main으로 설정
push -u (원격저장소주소) (브랜치 명) : 레파지토리에 코드 올리기 (main 브랜치 아닌것도 가능)
// -u는 주소 기억하라는 뜻이므로 한번 사용했으면 git push만 써도 -u로 보냈던 주소로 적용되어 생략하고 git push만 사용할 수 있음.
remote add (변수명) (주소) : push에 필요한 주소를 간단한 변수로 저장해서 사용하기 위해 설정
clone (주소) : 코드 내려받기


- HEAD는 내 현 위치 (HEAD -> main 은 나는 지금 main에 있다라는 뜻) 
- 첫 수정이 Main이 됨 (commit하면 사라짐, 수정 중인 원본 코드라고 쉽게 생각하자)
- VSCODE에서 SOURCE CONTROL에서 +는 add , -는 add 취소 기능
- log --all --oneline 했을 때 노란 글씨가 커밋 아이디임
- Git Graph를 이용해서 log 기능을 더 편리하게 사용 
- Conflict 해결법은 원하는 코드만 남기고 삭제한 다음 git add, git commit하면됨 (merge할 때 두 개의 파일 모두 같은 부분 수정했을 때 발생)

